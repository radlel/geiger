import android.annotation.SuppressLint;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.Environment;
import android.os.Handler;
import android.os.SystemClock;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Set;
import java.util.UUID;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;
import java.io.FileOutputStream;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;


public class MainActivity extends AppCompatActivity {
    private Button mConnectBtn;
    private ListView mDevicesListView;
    private TextView status;
    private TextView rx;

    private BluetoothAdapter mBTAdapter;
    private Set<BluetoothDevice> mPairedDevices;
    private ArrayAdapter<String> mBTArrayAdapter;
    private Handler mHandler;
    private ConnectedThread mConnectedThread;
    private BluetoothSocket mBTSocket = null;
    private static final UUID BTMODULEUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    private ExcelFile excelFile;
    private String FILE_NAME_TEMP;
    private final static int REQUEST_ENABLE_BT = 1;
    private final static int MESSAGE_READ = 2;
    private final static int CONNECTING_STATUS = 3;
    static String flag_name = "";

    @SuppressLint("HandlerLeak")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

        mConnectBtn = (Button) findViewById(R.id.mConnectBtn);
        mDevicesListView = (ListView) findViewById(R.id.mDevicesListView);
        status = (TextView) findViewById(R.id.status);
        rx = (TextView) findViewById(R.id.rx);

        mBTArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
        mBTAdapter = BluetoothAdapter.getDefaultAdapter();
        mDevicesListView.setAdapter(mBTArrayAdapter);
        mDevicesListView.setOnItemClickListener(mDeviceClickListener);
        excelFile = new ExcelFile();

        mHandler = new Handler() {
            public void handleMessage(android.os.Message msg) {
                if (msg.what == MESSAGE_READ) {
                    String readMessage = null;
                    try {    
                        readMessage = new String((byte[]) msg.obj, "UTF-8");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                }

                if (msg.what == CONNECTING_STATUS) {  
                    if (msg.arg1 == 1) {
                        mConnectBtn.setText("finish");
                        mBTArrayAdapter.clear();
                        status.setText("Bluetooth enabled, connected"); 
                        Toast.makeText(MainActivity.this, "Connected", Toast.LENGTH_SHORT).show();
                    }
                    else {
                        Toast.makeText(MainActivity.this, "Connection failed", Toast.LENGTH_SHORT).show();
                    }                                                                               
                }
            }
        };

        if (mBTArrayAdapter == null) {                                                            
            status.setText("Cannot find Bluetooth Adapter on your device");
            Toast.makeText(MainActivity.this, "Cannot find Bluetooth Adapter on your device", Toast.LENGTH_LONG).show();
        } else {
            mConnectBtn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if(mConnectBtn.getText().equals("connect")) {
                        bluetoothOn(v);
                        listPairedDevices();
                    }else if(mConnectBtn.getText().equals("cancel")) {
                        mBTArrayAdapter.clear();
                        mBTAdapter.disable();
                        mConnectBtn.setText("connect");
                        status.setText("Click CONNECT to start new session");
                        Toast.makeText(MainActivity.this, "Session canceled", Toast.LENGTH_SHORT).show();
                    } else {
                        mConnectedThread.write();
                        bluetoothOff(v);
                        mConnectBtn.setText("connect");
                        status.setText("Click CONNECT to start new session");            
                        rx.setText("");
                        Toast.makeText(MainActivity.this, "File saved: " + FILE_NAME_TEMP, Toast.LENGTH_LONG).show();
                    }
                }
            });
        }
    }

    private void bluetoothOn(View view){
        if (!mBTAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        } else {
            status.setText("Bluetooth enabled, not connected");                                    
            Toast.makeText(this, "Select paired device to start connection", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent Data){                  
        if (requestCode == REQUEST_ENABLE_BT) {                                                     
            if (resultCode == RESULT_OK) {                                                         
                listPairedDevices();
                status.setText("Bluetooth enabled, not connected");                                
                Toast.makeText(this, "Select paired device to start connection", Toast.LENGTH_SHORT).show();
            }
            else {                                                                                 
                status.setText("Bluetooth disabled, not connected");                               
                Toast.makeText(this, "Accept request to continue", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private AdapterView.OnItemClickListener mDeviceClickListener;

    {
        mDeviceClickListener = new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> av, View v, int arg2, long arg3) { 
                String info = ((TextView) v).getText().toString();                           
                final String address = info.substring(info.length() - 17);
                final String name = info.substring(0, info.length() - 17);

                new Thread() {
                    public void run() {
                        boolean fail = false;
                        BluetoothDevice device = mBTAdapter.getRemoteDevice(address);
                        try {
                            mBTSocket = createBluetoothSocket(device);
                        } catch (IOException e) {
                            fail = true;
                        }
                        try {
                            mBTSocket.connect();
                        } catch (IOException e) {
                            try {
                                fail = true;
                                mBTSocket.close();
                                mHandler.obtainMessage(CONNECTING_STATUS, -1, -1).sendToTarget();
                            } catch (IOException e2) {
                                e2.printStackTrace();
                            }
                        }

                        if (fail == false) {                                                      
                            excelFile.createNewFile();
                            mConnectedThread = new ConnectedThread(mBTSocket);
                            mConnectedThread.start();
                            mHandler.obtainMessage(CONNECTING_STATUS, 1, -1, name).sendToTarget();
                        }
                    }
                }.start();
            }
        };
    }

    private void bluetoothOff(View view){
        mBTAdapter.disable();                                                                       
        excelFile.finishRecording();                                                              
        mBTArrayAdapter.clear();
        mConnectedThread.cancel();                                                                 
    }

    private void listPairedDevices(){                                                               
        mPairedDevices = mBTAdapter.getBondedDevices();
        if(mBTAdapter.isEnabled()) {
            mConnectBtn.setText("cancel");
            for (BluetoothDevice device : mPairedDevices)
                mBTArrayAdapter.add(device.getName() + "\n" + device.getAddress());
        }
    }

    private BluetoothSocket createBluetoothSocket(BluetoothDevice device) throws IOException {  
        return  device.createRfcommSocketToServiceRecord(BTMODULEUUID);
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        private long temporary_time;

        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            temporary_time = System.currentTimeMillis();

            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {                                                                         
            byte[] buffer = new byte[1024];                                                         
            int bytes;                                                                             

            while (true) {                                                                          
                try {
                    bytes = mmInStream.available();                                                 
                    if(bytes != 0) {

                        temporary_time = System.currentTimeMillis();
                        SystemClock.sleep(100);                                                
                        bytes = mmInStream.available();
                        bytes = mmInStream.read(buffer, 0, bytes);
                        mHandler.obtainMessage(MESSAGE_READ, bytes, -1, buffer)
                                .sendToTarget();

                        String readMessage = new String(buffer);
                        final String[] strings = readMessage.split(",");                            
			
                        excelFile.addCells(0, strings[0]);                                        
                        excelFile.addCells(1, strings[1]);
                        excelFile.addCells(2, strings[2]);

                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                if(strings[2].length() > 0) {
                                    flag_name = strings[2];
                                }
                                String str = "Time: " + strings[0] + "s" + "\n" + "CPS: " + strings[1] + "\n" + "Flag: " + flag_name;
                                rx.setText(str);
                            }
                        });
			
                        for(int i = 0; i < 50; i++) {                                           
                            buffer[i] = ' ';
                        }
                    } else {                                                                       
                        if(System.currentTimeMillis() - temporary_time >= 2000 && mBTAdapter.isEnabled()) {
                            mBTAdapter.disable();
                            excelFile.finishRecording();
                            mConnectedThread.cancel();

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    mBTArrayAdapter.clear();
                                    mConnectBtn.setText("connect");
                                    status.setText("Click CONNECT to start new session"); 
                                    rx.setText("");
                                    Toast.makeText(MainActivity.this, "File saved: " + FILE_NAME_TEMP, Toast.LENGTH_LONG).show();
                                }
                            });
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    break;
                }
            }
        }

        public void write() {                                                                   
            try {
                byte b = 'x';
                mmOutStream.write(b);
            } catch (IOException e) { }
        }

        public void cancel() {                                                                 
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }

    private class ExcelFile {
        private SimpleDateFormat formatter_file_name;
        private SimpleDateFormat formatter_in_file;
        private Date date;

        private String FILE_NAME;
        private Workbook workbook;
        private Cell cell;
        private CellStyle cs_normal;
        private CellStyle cs_colored;
        private Sheet sheet;

        private Row row;

        private File file;
        private int index;

        @SuppressLint("SimpleDateFormat")
        private void createNewFile() {
            workbook = new HSSFWorkbook();
            sheet = workbook.createSheet("Results");
            formatter_file_name = new SimpleDateFormat("dd_MM_yyyy__HH_mm_ss");
            formatter_in_file = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
            date = new Date();
            FILE_NAME = formatter_file_name.format(date) + ".xls";
            FILE_NAME_TEMP = FILE_NAME;
            cs_normal = workbook.createCellStyle();
            cs_normal.setFillBackgroundColor(HSSFColor.WHITE.index);
            cs_colored = workbook.createCellStyle();
            cs_colored.setFillForegroundColor(HSSFColor.LIME.index);
            cs_colored.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
            index = 5;

            row = sheet.createRow(0);
            cell = row.createCell(0);
            cell.setCellValue("File created:");
            cell.setCellStyle(cs_normal);

            cell = row.createCell(1);
            cell.setCellValue(formatter_in_file.format(date));
            cell.setCellStyle(cs_normal);

            row = sheet.createRow(1);
            cell = row.createCell(0);
            cell.setCellValue("CPM to uSv/h factor:");
            cell.setCellStyle(cs_normal);

            cell = row.createCell(1);
            cell.setCellValue("0,0057");
            cell.setCellStyle(cs_normal);

            row = sheet.createRow(2);
            cell = row.createCell(0);
            cell.setCellValue("CPM to uRem/h factor:");
            cell.setCellStyle(cs_normal);

            cell = row.createCell(1);
            cell.setCellValue("0,5700");
            cell.setCellStyle(cs_normal);

            row = sheet.createRow(4);
            cell = row.createCell(0);
            cell.setCellValue("Time [s]");
            cell.setCellStyle(cs_colored);

            cell = row.createCell(1);
            cell.setCellValue("CPS");
            cell.setCellStyle(cs_colored);

            cell = row.createCell(2);
            cell.setCellValue("Flag");
            cell.setCellStyle(cs_colored);

            sheet.setColumnWidth(0, (15 * 500));
            sheet.setColumnWidth(1, (15 * 500));
            sheet.setColumnWidth(2, (15 * 500));
        }

        private void addCells(int i, String str) {
            if(i == 0) {
                row = sheet.createRow(index);
            }
            cell = row.createCell(i);
            if (i != 2) {
                cell.setCellValue(Double.parseDouble(str));
            }
            cell.setCellStyle(cs_normal);
            if(i == 2) {
                cell.setCellValue(str);
                index++;
            }
        }
	
        private void finishRecording() {
            file = new File(Environment.getExternalStorageDirectory(), "Geiger_RL2018PI"); 
            if(!file.exists()) {
                file.mkdirs();
            }
            file = new File(Environment.getExternalStorageDirectory()  
                    + "/" + "Geiger_RL2018PI" + "/" + FILE_NAME);

            FileOutputStream os = null;

            try {
                os = new FileOutputStream(file);
                workbook.write(os);
                Log.w("FileUtils", "Writing file" + file);
            } catch (IOException e) {
                Log.w("FileUtils", "Error writing " + file, e);
            } catch (Exception e) {
                Log.w("FileUtils", "Failed to save file", e);
            } finally {
                try {
                    if (null != os)
                        os.close();
                } catch (Exception ex) {
                }
            }
        }
    }
}
